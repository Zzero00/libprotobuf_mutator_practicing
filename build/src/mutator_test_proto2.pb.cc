// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mutator_test_proto2.proto

#include "mutator_test_proto2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protobuf_mutator {
constexpr Msg_SubMsg::Msg_SubMsg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : optional_int64_(int64_t{0}){}
struct Msg_SubMsgDefaultTypeInternal {
  constexpr Msg_SubMsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SubMsgDefaultTypeInternal() {}
  union {
    Msg_SubMsg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SubMsgDefaultTypeInternal _Msg_SubMsg_default_instance_;
constexpr Msg_Group::Msg_Group(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repeated_bool_()
  , required_bool_(false)
  , optional_bool_(false){}
struct Msg_GroupDefaultTypeInternal {
  constexpr Msg_GroupDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_GroupDefaultTypeInternal() {}
  union {
    Msg_Group _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_GroupDefaultTypeInternal _Msg_Group_default_instance_;
constexpr Msg_EmptyMessage::Msg_EmptyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_EmptyMessageDefaultTypeInternal {
  constexpr Msg_EmptyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_EmptyMessageDefaultTypeInternal() {}
  union {
    Msg_EmptyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_EmptyMessageDefaultTypeInternal _Msg_EmptyMessage_default_instance_;
constexpr Msg_RegressionMessage::Msg_RegressionMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enum__(0)
{}
struct Msg_RegressionMessageDefaultTypeInternal {
  constexpr Msg_RegressionMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_RegressionMessageDefaultTypeInternal() {}
  union {
    Msg_RegressionMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_RegressionMessageDefaultTypeInternal _Msg_RegressionMessage_default_instance_;
constexpr Msg_SmallMessage::Msg_SmallMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : opt_bool_(false)
  , opt_enum_(0)
{}
struct Msg_SmallMessageDefaultTypeInternal {
  constexpr Msg_SmallMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_SmallMessageDefaultTypeInternal() {}
  union {
    Msg_SmallMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_SmallMessageDefaultTypeInternal _Msg_SmallMessage_default_instance_;
constexpr Msg_MapMessage_Map1Entry_DoNotUse::Msg_MapMessage_Map1Entry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_MapMessage_Map1Entry_DoNotUseDefaultTypeInternal {
  constexpr Msg_MapMessage_Map1Entry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_MapMessage_Map1Entry_DoNotUseDefaultTypeInternal() {}
  union {
    Msg_MapMessage_Map1Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_MapMessage_Map1Entry_DoNotUseDefaultTypeInternal _Msg_MapMessage_Map1Entry_DoNotUse_default_instance_;
constexpr Msg_MapMessage_Map2Entry_DoNotUse::Msg_MapMessage_Map2Entry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Msg_MapMessage_Map2Entry_DoNotUseDefaultTypeInternal {
  constexpr Msg_MapMessage_Map2Entry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_MapMessage_Map2Entry_DoNotUseDefaultTypeInternal() {}
  union {
    Msg_MapMessage_Map2Entry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_MapMessage_Map2Entry_DoNotUseDefaultTypeInternal _Msg_MapMessage_Map2Entry_DoNotUse_default_instance_;
constexpr Msg_MapMessage::Msg_MapMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : map1_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , map2_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct Msg_MapMessageDefaultTypeInternal {
  constexpr Msg_MapMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Msg_MapMessageDefaultTypeInternal() {}
  union {
    Msg_MapMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Msg_MapMessageDefaultTypeInternal _Msg_MapMessage_default_instance_;
constexpr Msg::Msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : repeated_double_()
  , repeated_float_()
  , repeated_int32_()
  , repeated_int64_()
  , repeated_uint32_()
  , repeated_uint64_()
  , repeated_sint32_()
  , repeated_sint64_()
  , repeated_fixed32_()
  , repeated_fixed64_()
  , repeated_sfixed32_()
  , repeated_sfixed64_()
  , repeated_bool_()
  , repeated_string_()
  , repeated_bytes_()
  , repeated_enum_()
  , repeated_msg_()
  , required_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , required_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , optional_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , optional_bytes_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , required_msg_(nullptr)
  , optional_msg_(nullptr)
  , sub_message_(nullptr)
  , group_(nullptr)
  , any_(nullptr)
  , required_double_(0)
  , required_float_(0)
  , required_int32_(0)
  , required_int64_(int64_t{0})
  , required_uint64_(uint64_t{0u})
  , required_uint32_(0u)
  , required_sint32_(0)
  , required_sint64_(int64_t{0})
  , required_fixed64_(uint64_t{0u})
  , required_fixed32_(0u)
  , required_sfixed32_(0)
  , required_sfixed64_(int64_t{0})
  , required_enum_(0)

  , optional_float_(0)
  , optional_double_(0)
  , optional_int64_(int64_t{0})
  , optional_int32_(0)
  , required_bool_(false)
  , optional_bool_(false)
  , optional_uint64_(uint64_t{0u})
  , optional_uint32_(0u)
  , optional_sint32_(0)
  , optional_sint64_(int64_t{0})
  , optional_fixed64_(uint64_t{0u})
  , optional_fixed32_(0u)
  , optional_sfixed32_(0)
  , optional_sfixed64_(int64_t{0})
  , optional_enum_(0)

  , _oneof_case_{}{}
struct MsgDefaultTypeInternal {
  constexpr MsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgDefaultTypeInternal() {}
  union {
    Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgDefaultTypeInternal _Msg_default_instance_;
}  // namespace protobuf_mutator
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mutator_5ftest_5fproto2_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_mutator_5ftest_5fproto2_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mutator_5ftest_5fproto2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mutator_5ftest_5fproto2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_SubMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_SubMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_SubMsg, optional_int64_),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_Group, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_Group, required_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_Group, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_Group, repeated_bool_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_EmptyMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_RegressionMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_RegressionMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_RegressionMessage, enum__),
  0,
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_SmallMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_SmallMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_SmallMessage, opt_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_SmallMessage, opt_enum_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage_Map1Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage_Map1Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage_Map1Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage_Map1Entry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage_Map2Entry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage_Map2Entry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage_Map2Entry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage_Map2Entry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage, map1_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg_MapMessage, map2_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, required_msg_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, optional_msg_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_double_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_float_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_int32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_int64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_uint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_uint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_sint32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_sint64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_fixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_fixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_sfixed32_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_sfixed64_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_bool_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_string_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_bytes_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_enum_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, repeated_msg_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, sub_message_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, group_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, any_),
  PROTOBUF_FIELD_OFFSET(::protobuf_mutator::Msg, OneOf_),
  9,
  10,
  11,
  12,
  14,
  13,
  15,
  16,
  18,
  17,
  19,
  20,
  26,
  0,
  1,
  21,
  4,
  23,
  22,
  25,
  24,
  29,
  28,
  30,
  31,
  33,
  32,
  34,
  35,
  27,
  2,
  3,
  36,
  5,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  6,
  7,
  8,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::protobuf_mutator::Msg_SubMsg)},
  { 7, 15, sizeof(::protobuf_mutator::Msg_Group)},
  { 18, -1, sizeof(::protobuf_mutator::Msg_EmptyMessage)},
  { 23, 29, sizeof(::protobuf_mutator::Msg_RegressionMessage)},
  { 30, 37, sizeof(::protobuf_mutator::Msg_SmallMessage)},
  { 39, 46, sizeof(::protobuf_mutator::Msg_MapMessage_Map1Entry_DoNotUse)},
  { 48, 55, sizeof(::protobuf_mutator::Msg_MapMessage_Map2Entry_DoNotUse)},
  { 57, -1, sizeof(::protobuf_mutator::Msg_MapMessage)},
  { 64, 141, sizeof(::protobuf_mutator::Msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_SubMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_Group_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_EmptyMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_RegressionMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_SmallMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_MapMessage_Map1Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_MapMessage_Map2Entry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_MapMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protobuf_mutator::_Msg_default_instance_),
};

const char descriptor_table_protodef_mutator_5ftest_5fproto2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031mutator_test_proto2.proto\022\020protobuf_mu"
  "tator\032\031google/protobuf/any.proto\"\347\025\n\003Msg"
  "\022\027\n\017required_double\030\001 \002(\001\022\026\n\016required_fl"
  "oat\030\002 \002(\002\022\026\n\016required_int32\030\003 \002(\005\022\026\n\016req"
  "uired_int64\030\004 \002(\003\022\027\n\017required_uint32\030\005 \002"
  "(\r\022\027\n\017required_uint64\030\006 \002(\004\022\027\n\017required_"
  "sint32\030\007 \002(\021\022\027\n\017required_sint64\030\010 \002(\022\022\030\n"
  "\020required_fixed32\030\t \002(\007\022\030\n\020required_fixe"
  "d64\030\n \002(\006\022\031\n\021required_sfixed32\030\013 \002(\017\022\031\n\021"
  "required_sfixed64\030\014 \002(\020\022\025\n\rrequired_bool"
  "\030\r \002(\010\022\027\n\017required_string\030\016 \002(\t\022\026\n\016requi"
  "red_bytes\030\017 \002(\014\0221\n\rrequired_enum\030\020 \002(\0162\032"
  ".protobuf_mutator.Msg.Enum\0222\n\014required_m"
  "sg\030\021 \002(\0132\034.protobuf_mutator.Msg.SubMsg\022\027"
  "\n\017optional_double\030\022 \001(\001\022\026\n\016optional_floa"
  "t\030\023 \001(\002\022\026\n\016optional_int32\030\024 \001(\005\022\026\n\016optio"
  "nal_int64\030\025 \001(\003\022\027\n\017optional_uint32\030\026 \001(\r"
  "\022\027\n\017optional_uint64\030\027 \001(\004\022\027\n\017optional_si"
  "nt32\030\030 \001(\021\022\027\n\017optional_sint64\030\031 \001(\022\022\030\n\020o"
  "ptional_fixed32\030\032 \001(\007\022\030\n\020optional_fixed6"
  "4\030\033 \001(\006\022\031\n\021optional_sfixed32\030\034 \001(\017\022\031\n\021op"
  "tional_sfixed64\030\035 \001(\020\022\025\n\roptional_bool\030\036"
  " \001(\010\022\027\n\017optional_string\030\037 \001(\t\022\026\n\016optiona"
  "l_bytes\030  \001(\014\0221\n\roptional_enum\030! \001(\0162\032.p"
  "rotobuf_mutator.Msg.Enum\022+\n\014optional_msg"
  "\030\" \001(\0132\025.protobuf_mutator.Msg\022\027\n\017repeate"
  "d_double\030# \003(\001\022\026\n\016repeated_float\030$ \003(\002\022\026"
  "\n\016repeated_int32\030% \003(\005\022\026\n\016repeated_int64"
  "\030& \003(\003\022\027\n\017repeated_uint32\030\' \003(\r\022\027\n\017repea"
  "ted_uint64\030( \003(\004\022\027\n\017repeated_sint32\030) \003("
  "\021\022\027\n\017repeated_sint64\030* \003(\022\022\030\n\020repeated_f"
  "ixed32\030+ \003(\007\022\030\n\020repeated_fixed64\030, \003(\006\022\031"
  "\n\021repeated_sfixed32\030- \003(\017\022\031\n\021repeated_sf"
  "ixed64\030. \003(\020\022\025\n\rrepeated_bool\030/ \003(\010\022\027\n\017r"
  "epeated_string\0300 \003(\t\022\026\n\016repeated_bytes\0301"
  " \003(\014\0221\n\rrepeated_enum\0302 \003(\0162\032.protobuf_m"
  "utator.Msg.Enum\022+\n\014repeated_msg\0303 \003(\0132\025."
  "protobuf_mutator.Msg\022\026\n\014oneof_double\0304 \001"
  "(\001H\000\022\025\n\013oneof_float\0305 \001(\002H\000\022\025\n\013oneof_int"
  "32\0306 \001(\005H\000\022\025\n\013oneof_int64\0307 \001(\003H\000\022\026\n\014one"
  "of_uint32\0308 \001(\rH\000\022\026\n\014oneof_uint64\0309 \001(\004H"
  "\000\022\026\n\014oneof_sint32\030: \001(\021H\000\022\026\n\014oneof_sint6"
  "4\030; \001(\022H\000\022\027\n\roneof_fixed32\030< \001(\007H\000\022\027\n\ron"
  "eof_fixed64\030= \001(\006H\000\022\030\n\016oneof_sfixed32\030> "
  "\001(\017H\000\022\030\n\016oneof_sfixed64\030\? \001(\020H\000\022\024\n\noneof"
  "_bool\030@ \001(\010H\000\022\026\n\014oneof_string\030A \001(\tH\000\022\025\n"
  "\013oneof_bytes\030B \001(\014H\000\0220\n\noneof_enum\030C \001(\016"
  "2\032.protobuf_mutator.Msg.EnumH\000\022*\n\toneof_"
  "msg\030D \001(\0132\025.protobuf_mutator.MsgH\000\0221\n\013su"
  "b_message\030E \001(\0132\034.protobuf_mutator.Msg.S"
  "ubMsg\022*\n\005group\030F \002(\n2\033.protobuf_mutator."
  "Msg.Group\022!\n\003any\030Z \001(\0132\024.google.protobuf"
  ".Any\032 \n\006SubMsg\022\026\n\016optional_int64\030\001 \001(\003\032L"
  "\n\005Group\022\025\n\rrequired_bool\030\001 \002(\010\022\025\n\roption"
  "al_bool\030\002 \001(\010\022\025\n\rrepeated_bool\030\003 \003(\010\032\016\n\014"
  "EmptyMessage\032y\n\021RegressionMessage\022E\n\004enu"
  "m\030\002 \001(\01627.protobuf_mutator.Msg.Regressio"
  "nMessage.SingleValueEnum\"\035\n\017SingleValueE"
  "num\022\n\n\006ENUM_0\020\000\032\223\001\n\014SmallMessage\022\020\n\010opt_"
  "bool\030\001 \001(\010\0229\n\010opt_enum\030\002 \001(\0162\'.protobuf_"
  "mutator.Msg.SmallMessage.Enum\"6\n\004Enum\022\n\n"
  "\006ENUM_0\020\000\022\n\n\006ENUM_1\020\001\022\n\n\006ENUM_2\020\002\022\n\n\006ENU"
  "M_3\020\003\032\361\001\n\nMapMessage\0228\n\004map1\030\001 \003(\0132*.pro"
  "tobuf_mutator.Msg.MapMessage.Map1Entry\0228"
  "\n\004map2\030\002 \003(\0132*.protobuf_mutator.Msg.MapM"
  "essage.Map2Entry\032+\n\tMap1Entry\022\013\n\003key\030\001 \001"
  "(\t\022\r\n\005value\030\002 \001(\005:\0028\001\032B\n\tMap2Entry\022\013\n\003ke"
  "y\030\001 \001(\005\022$\n\005value\030\002 \001(\0132\025.protobuf_mutato"
  "r.Msg:\0028\001\"~\n\004Enum\022\n\n\006ENUM_0\020\000\022\n\n\006ENUM_1\020"
  "\001\022\n\n\006ENUM_2\020\002\022\n\n\006ENUM_3\020\003\022\n\n\006ENUM_4\020\004\022\n\n"
  "\006ENUM_5\020\005\022\n\n\006ENUM_6\020\006\022\n\n\006ENUM_7\020\007\022\n\n\006ENU"
  "M_8\020\010\022\n\n\006ENUM_9\020\tB\007\n\005OneOf"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mutator_5ftest_5fproto2_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mutator_5ftest_5fproto2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mutator_5ftest_5fproto2_2eproto = {
  false, false, 2866, descriptor_table_protodef_mutator_5ftest_5fproto2_2eproto, "mutator_test_proto2.proto", 
  &descriptor_table_mutator_5ftest_5fproto2_2eproto_once, descriptor_table_mutator_5ftest_5fproto2_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_mutator_5ftest_5fproto2_2eproto::offsets,
  file_level_metadata_mutator_5ftest_5fproto2_2eproto, file_level_enum_descriptors_mutator_5ftest_5fproto2_2eproto, file_level_service_descriptors_mutator_5ftest_5fproto2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_mutator_5ftest_5fproto2_2eproto_getter() {
  return &descriptor_table_mutator_5ftest_5fproto2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_mutator_5ftest_5fproto2_2eproto(&descriptor_table_mutator_5ftest_5fproto2_2eproto);
namespace protobuf_mutator {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Msg_RegressionMessage_SingleValueEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mutator_5ftest_5fproto2_2eproto);
  return file_level_enum_descriptors_mutator_5ftest_5fproto2_2eproto[0];
}
bool Msg_RegressionMessage_SingleValueEnum_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Msg_RegressionMessage_SingleValueEnum Msg_RegressionMessage::ENUM_0;
constexpr Msg_RegressionMessage_SingleValueEnum Msg_RegressionMessage::SingleValueEnum_MIN;
constexpr Msg_RegressionMessage_SingleValueEnum Msg_RegressionMessage::SingleValueEnum_MAX;
constexpr int Msg_RegressionMessage::SingleValueEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Msg_SmallMessage_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mutator_5ftest_5fproto2_2eproto);
  return file_level_enum_descriptors_mutator_5ftest_5fproto2_2eproto[1];
}
bool Msg_SmallMessage_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Msg_SmallMessage_Enum Msg_SmallMessage::ENUM_0;
constexpr Msg_SmallMessage_Enum Msg_SmallMessage::ENUM_1;
constexpr Msg_SmallMessage_Enum Msg_SmallMessage::ENUM_2;
constexpr Msg_SmallMessage_Enum Msg_SmallMessage::ENUM_3;
constexpr Msg_SmallMessage_Enum Msg_SmallMessage::Enum_MIN;
constexpr Msg_SmallMessage_Enum Msg_SmallMessage::Enum_MAX;
constexpr int Msg_SmallMessage::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Msg_Enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mutator_5ftest_5fproto2_2eproto);
  return file_level_enum_descriptors_mutator_5ftest_5fproto2_2eproto[2];
}
bool Msg_Enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Msg_Enum Msg::ENUM_0;
constexpr Msg_Enum Msg::ENUM_1;
constexpr Msg_Enum Msg::ENUM_2;
constexpr Msg_Enum Msg::ENUM_3;
constexpr Msg_Enum Msg::ENUM_4;
constexpr Msg_Enum Msg::ENUM_5;
constexpr Msg_Enum Msg::ENUM_6;
constexpr Msg_Enum Msg::ENUM_7;
constexpr Msg_Enum Msg::ENUM_8;
constexpr Msg_Enum Msg::ENUM_9;
constexpr Msg_Enum Msg::Enum_MIN;
constexpr Msg_Enum Msg::Enum_MAX;
constexpr int Msg::Enum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Msg_SubMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SubMsg>()._has_bits_);
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_SubMsg::Msg_SubMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_mutator.Msg.SubMsg)
}
Msg_SubMsg::Msg_SubMsg(const Msg_SubMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  optional_int64_ = from.optional_int64_;
  // @@protoc_insertion_point(copy_constructor:protobuf_mutator.Msg.SubMsg)
}

inline void Msg_SubMsg::SharedCtor() {
optional_int64_ = int64_t{0};
}

Msg_SubMsg::~Msg_SubMsg() {
  // @@protoc_insertion_point(destructor:protobuf_mutator.Msg.SubMsg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SubMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SubMsg::ArenaDtor(void* object) {
  Msg_SubMsg* _this = reinterpret_cast< Msg_SubMsg* >(object);
  (void)_this;
}
void Msg_SubMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SubMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SubMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_mutator.Msg.SubMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  optional_int64_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SubMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 optional_int64 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_optional_int64(&has_bits);
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_SubMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_mutator.Msg.SubMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 optional_int64 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_optional_int64(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_mutator.Msg.SubMsg)
  return target;
}

size_t Msg_SubMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_mutator.Msg.SubMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 optional_int64 = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_optional_int64());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SubMsg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SubMsg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SubMsg::GetClassData() const { return &_class_data_; }

void Msg_SubMsg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg_SubMsg *>(to)->MergeFrom(
      static_cast<const Msg_SubMsg &>(from));
}


void Msg_SubMsg::MergeFrom(const Msg_SubMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_mutator.Msg.SubMsg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_optional_int64()) {
    _internal_set_optional_int64(from._internal_optional_int64());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SubMsg::CopyFrom(const Msg_SubMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_mutator.Msg.SubMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SubMsg::IsInitialized() const {
  return true;
}

void Msg_SubMsg::InternalSwap(Msg_SubMsg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(optional_int64_, other->optional_int64_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SubMsg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[0]);
}

// ===================================================================

class Msg_Group::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_Group>()._has_bits_);
  static void set_has_required_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

Msg_Group::Msg_Group(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_bool_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_mutator.Msg.Group)
}
Msg_Group::Msg_Group(const Msg_Group& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_bool_(from.repeated_bool_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&required_bool_, &from.required_bool_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_bool_) -
    reinterpret_cast<char*>(&required_bool_)) + sizeof(optional_bool_));
  // @@protoc_insertion_point(copy_constructor:protobuf_mutator.Msg.Group)
}

inline void Msg_Group::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&required_bool_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&optional_bool_) -
    reinterpret_cast<char*>(&required_bool_)) + sizeof(optional_bool_));
}

Msg_Group::~Msg_Group() {
  // @@protoc_insertion_point(destructor:protobuf_mutator.Msg.Group)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_Group::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_Group::ArenaDtor(void* object) {
  Msg_Group* _this = reinterpret_cast< Msg_Group* >(object);
  (void)_this;
}
void Msg_Group::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_Group::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_mutator.Msg.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_bool_.Clear();
  ::memset(&required_bool_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optional_bool_) -
      reinterpret_cast<char*>(&required_bool_)) + sizeof(optional_bool_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_Group::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bool required_bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_required_bool(&has_bits);
          required_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optional_bool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_optional_bool(&has_bits);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_Group::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_mutator.Msg.Group)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool required_bool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_required_bool(), target);
  }

  // optional bool optional_bool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_optional_bool(), target);
  }

  // repeated bool repeated_bool = 3;
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_repeated_bool(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_mutator.Msg.Group)
  return target;
}

size_t Msg_Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_mutator.Msg.Group)
  size_t total_size = 0;

  // required bool required_bool = 1;
  if (_internal_has_required_bool()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bool repeated_bool = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // optional bool optional_bool = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_Group::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_Group::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_Group::GetClassData() const { return &_class_data_; }

void Msg_Group::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg_Group *>(to)->MergeFrom(
      static_cast<const Msg_Group &>(from));
}


void Msg_Group::MergeFrom(const Msg_Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_mutator.Msg.Group)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_bool_.MergeFrom(from.repeated_bool_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      required_bool_ = from.required_bool_;
    }
    if (cached_has_bits & 0x00000002u) {
      optional_bool_ = from.optional_bool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_Group::CopyFrom(const Msg_Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_mutator.Msg.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_Group::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void Msg_Group::InternalSwap(Msg_Group* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_Group, optional_bool_)
      + sizeof(Msg_Group::optional_bool_)
      - PROTOBUF_FIELD_OFFSET(Msg_Group, required_bool_)>(
          reinterpret_cast<char*>(&required_bool_),
          reinterpret_cast<char*>(&other->required_bool_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_Group::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[1]);
}

// ===================================================================

class Msg_EmptyMessage::_Internal {
 public:
};

Msg_EmptyMessage::Msg_EmptyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_mutator.Msg.EmptyMessage)
}
Msg_EmptyMessage::Msg_EmptyMessage(const Msg_EmptyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobuf_mutator.Msg.EmptyMessage)
}

inline void Msg_EmptyMessage::SharedCtor() {
}

Msg_EmptyMessage::~Msg_EmptyMessage() {
  // @@protoc_insertion_point(destructor:protobuf_mutator.Msg.EmptyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_EmptyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_EmptyMessage::ArenaDtor(void* object) {
  Msg_EmptyMessage* _this = reinterpret_cast< Msg_EmptyMessage* >(object);
  (void)_this;
}
void Msg_EmptyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_EmptyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_EmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_mutator.Msg.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_EmptyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_EmptyMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_mutator.Msg.EmptyMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_mutator.Msg.EmptyMessage)
  return target;
}

size_t Msg_EmptyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_mutator.Msg.EmptyMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_EmptyMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_EmptyMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_EmptyMessage::GetClassData() const { return &_class_data_; }

void Msg_EmptyMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg_EmptyMessage *>(to)->MergeFrom(
      static_cast<const Msg_EmptyMessage &>(from));
}


void Msg_EmptyMessage::MergeFrom(const Msg_EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_mutator.Msg.EmptyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_EmptyMessage::CopyFrom(const Msg_EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_mutator.Msg.EmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_EmptyMessage::IsInitialized() const {
  return true;
}

void Msg_EmptyMessage::InternalSwap(Msg_EmptyMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_EmptyMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[2]);
}

// ===================================================================

class Msg_RegressionMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_RegressionMessage>()._has_bits_);
  static void set_has_enum_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Msg_RegressionMessage::Msg_RegressionMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_mutator.Msg.RegressionMessage)
}
Msg_RegressionMessage::Msg_RegressionMessage(const Msg_RegressionMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  enum__ = from.enum__;
  // @@protoc_insertion_point(copy_constructor:protobuf_mutator.Msg.RegressionMessage)
}

inline void Msg_RegressionMessage::SharedCtor() {
enum__ = 0;
}

Msg_RegressionMessage::~Msg_RegressionMessage() {
  // @@protoc_insertion_point(destructor:protobuf_mutator.Msg.RegressionMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_RegressionMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_RegressionMessage::ArenaDtor(void* object) {
  Msg_RegressionMessage* _this = reinterpret_cast< Msg_RegressionMessage* >(object);
  (void)_this;
}
void Msg_RegressionMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_RegressionMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_RegressionMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_mutator.Msg.RegressionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enum__ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_RegressionMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .protobuf_mutator.Msg.RegressionMessage.SingleValueEnum enum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_mutator::Msg_RegressionMessage_SingleValueEnum_IsValid(val))) {
            _internal_set_enum_(static_cast<::protobuf_mutator::Msg_RegressionMessage_SingleValueEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_RegressionMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_mutator.Msg.RegressionMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_mutator.Msg.RegressionMessage.SingleValueEnum enum = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_enum_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_mutator.Msg.RegressionMessage)
  return target;
}

size_t Msg_RegressionMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_mutator.Msg.RegressionMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .protobuf_mutator.Msg.RegressionMessage.SingleValueEnum enum = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_enum_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_RegressionMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_RegressionMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_RegressionMessage::GetClassData() const { return &_class_data_; }

void Msg_RegressionMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg_RegressionMessage *>(to)->MergeFrom(
      static_cast<const Msg_RegressionMessage &>(from));
}


void Msg_RegressionMessage::MergeFrom(const Msg_RegressionMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_mutator.Msg.RegressionMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enum_()) {
    _internal_set_enum_(from._internal_enum_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_RegressionMessage::CopyFrom(const Msg_RegressionMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_mutator.Msg.RegressionMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_RegressionMessage::IsInitialized() const {
  return true;
}

void Msg_RegressionMessage::InternalSwap(Msg_RegressionMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(enum__, other->enum__);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_RegressionMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[3]);
}

// ===================================================================

class Msg_SmallMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg_SmallMessage>()._has_bits_);
  static void set_has_opt_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_opt_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Msg_SmallMessage::Msg_SmallMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_mutator.Msg.SmallMessage)
}
Msg_SmallMessage::Msg_SmallMessage(const Msg_SmallMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&opt_bool_, &from.opt_bool_,
    static_cast<size_t>(reinterpret_cast<char*>(&opt_enum_) -
    reinterpret_cast<char*>(&opt_bool_)) + sizeof(opt_enum_));
  // @@protoc_insertion_point(copy_constructor:protobuf_mutator.Msg.SmallMessage)
}

inline void Msg_SmallMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&opt_bool_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&opt_enum_) -
    reinterpret_cast<char*>(&opt_bool_)) + sizeof(opt_enum_));
}

Msg_SmallMessage::~Msg_SmallMessage() {
  // @@protoc_insertion_point(destructor:protobuf_mutator.Msg.SmallMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_SmallMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_SmallMessage::ArenaDtor(void* object) {
  Msg_SmallMessage* _this = reinterpret_cast< Msg_SmallMessage* >(object);
  (void)_this;
}
void Msg_SmallMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SmallMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_SmallMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_mutator.Msg.SmallMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&opt_bool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&opt_enum_) -
        reinterpret_cast<char*>(&opt_bool_)) + sizeof(opt_enum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SmallMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool opt_bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_opt_bool(&has_bits);
          opt_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_mutator.Msg.SmallMessage.Enum opt_enum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_mutator::Msg_SmallMessage_Enum_IsValid(val))) {
            _internal_set_opt_enum(static_cast<::protobuf_mutator::Msg_SmallMessage_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_SmallMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_mutator.Msg.SmallMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool opt_bool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_opt_bool(), target);
  }

  // optional .protobuf_mutator.Msg.SmallMessage.Enum opt_enum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_opt_enum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_mutator.Msg.SmallMessage)
  return target;
}

size_t Msg_SmallMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_mutator.Msg.SmallMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool opt_bool = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional .protobuf_mutator.Msg.SmallMessage.Enum opt_enum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_opt_enum());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_SmallMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_SmallMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_SmallMessage::GetClassData() const { return &_class_data_; }

void Msg_SmallMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg_SmallMessage *>(to)->MergeFrom(
      static_cast<const Msg_SmallMessage &>(from));
}


void Msg_SmallMessage::MergeFrom(const Msg_SmallMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_mutator.Msg.SmallMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      opt_bool_ = from.opt_bool_;
    }
    if (cached_has_bits & 0x00000002u) {
      opt_enum_ = from.opt_enum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_SmallMessage::CopyFrom(const Msg_SmallMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_mutator.Msg.SmallMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SmallMessage::IsInitialized() const {
  return true;
}

void Msg_SmallMessage::InternalSwap(Msg_SmallMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg_SmallMessage, opt_enum_)
      + sizeof(Msg_SmallMessage::opt_enum_)
      - PROTOBUF_FIELD_OFFSET(Msg_SmallMessage, opt_bool_)>(
          reinterpret_cast<char*>(&opt_bool_),
          reinterpret_cast<char*>(&other->opt_bool_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SmallMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[4]);
}

// ===================================================================

Msg_MapMessage_Map1Entry_DoNotUse::Msg_MapMessage_Map1Entry_DoNotUse() {}
Msg_MapMessage_Map1Entry_DoNotUse::Msg_MapMessage_Map1Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Msg_MapMessage_Map1Entry_DoNotUse::MergeFrom(const Msg_MapMessage_Map1Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Msg_MapMessage_Map1Entry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[5]);
}

// ===================================================================

Msg_MapMessage_Map2Entry_DoNotUse::Msg_MapMessage_Map2Entry_DoNotUse() {}
Msg_MapMessage_Map2Entry_DoNotUse::Msg_MapMessage_Map2Entry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Msg_MapMessage_Map2Entry_DoNotUse::MergeFrom(const Msg_MapMessage_Map2Entry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Msg_MapMessage_Map2Entry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[6]);
}

// ===================================================================

class Msg_MapMessage::_Internal {
 public:
};

Msg_MapMessage::Msg_MapMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  map1_(arena),
  map2_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_mutator.Msg.MapMessage)
}
Msg_MapMessage::Msg_MapMessage(const Msg_MapMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  // @@protoc_insertion_point(copy_constructor:protobuf_mutator.Msg.MapMessage)
}

inline void Msg_MapMessage::SharedCtor() {
}

Msg_MapMessage::~Msg_MapMessage() {
  // @@protoc_insertion_point(destructor:protobuf_mutator.Msg.MapMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg_MapMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg_MapMessage::ArenaDtor(void* object) {
  Msg_MapMessage* _this = reinterpret_cast< Msg_MapMessage* >(object);
  (void)_this;
  _this->map1_. ~MapField();
  _this->map2_. ~MapField();
}
inline void Msg_MapMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Msg_MapMessage::ArenaDtor);
  }
}
void Msg_MapMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg_MapMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_mutator.Msg.MapMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map1_.Clear();
  map2_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_MapMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, int32> map1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map1_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int32, .protobuf_mutator.Msg> map2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&map2_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_MapMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_mutator.Msg.MapMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> map1 = 1;
  if (!this->_internal_map1().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "protobuf_mutator.Msg.MapMessage.Map1Entry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map1().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map1().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map1().begin();
          it != this->_internal_map1().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Msg_MapMessage_Map1Entry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_map1().begin();
          it != this->_internal_map1().end(); ++it) {
        target = Msg_MapMessage_Map1Entry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<int32, .protobuf_mutator.Msg> map2 = 2;
  if (!this->_internal_map2().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_mutator::Msg >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map2().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map2().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_mutator::Msg >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_mutator::Msg >::const_iterator
          it = this->_internal_map2().begin();
          it != this->_internal_map2().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Msg_MapMessage_Map2Entry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_mutator::Msg >::const_iterator
          it = this->_internal_map2().begin();
          it != this->_internal_map2().end(); ++it) {
        target = Msg_MapMessage_Map2Entry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_mutator.Msg.MapMessage)
  return target;
}

size_t Msg_MapMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_mutator.Msg.MapMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> map1 = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map1_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_map1().begin();
      it != this->_internal_map1().end(); ++it) {
    total_size += Msg_MapMessage_Map1Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int32, .protobuf_mutator.Msg> map2 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map2_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::protobuf_mutator::Msg >::const_iterator
      it = this->_internal_map2().begin();
      it != this->_internal_map2().end(); ++it) {
    total_size += Msg_MapMessage_Map2Entry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg_MapMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg_MapMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg_MapMessage::GetClassData() const { return &_class_data_; }

void Msg_MapMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg_MapMessage *>(to)->MergeFrom(
      static_cast<const Msg_MapMessage &>(from));
}


void Msg_MapMessage::MergeFrom(const Msg_MapMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_mutator.Msg.MapMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map1_.MergeFrom(from.map1_);
  map2_.MergeFrom(from.map2_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg_MapMessage::CopyFrom(const Msg_MapMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_mutator.Msg.MapMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_MapMessage::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(map2_)) return false;
  return true;
}

void Msg_MapMessage::InternalSwap(Msg_MapMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  map1_.InternalSwap(&other->map1_);
  map2_.InternalSwap(&other->map2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_MapMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[7]);
}

// ===================================================================

class Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg>()._has_bits_);
  static void set_has_required_double(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_required_float(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_required_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_required_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_required_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_required_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_required_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_required_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_required_fixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_required_fixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_required_sfixed32(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_required_sfixed64(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_required_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_required_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_required_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_required_enum(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::protobuf_mutator::Msg_SubMsg& required_msg(const Msg* msg);
  static void set_has_required_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_optional_double(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_optional_float(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_optional_int32(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_optional_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_optional_uint32(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_optional_uint64(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_optional_sint32(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_optional_sint64(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_optional_fixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_optional_fixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_optional_sfixed32(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static void set_has_optional_sfixed64(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_optional_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_optional_string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_optional_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_optional_enum(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::protobuf_mutator::Msg& optional_msg(const Msg* msg);
  static void set_has_optional_msg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::protobuf_mutator::Msg& oneof_msg(const Msg* msg);
  static const ::protobuf_mutator::Msg_SubMsg& sub_message(const Msg* msg);
  static void set_has_sub_message(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::protobuf_mutator::Msg_Group& group(const Msg* msg);
  static void set_has_group(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const PROTOBUF_NAMESPACE_ID::Any& any(const Msg* msg);
  static void set_has_any(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x043ffe93) ^ 0x043ffe93) != 0;
  }
};

const ::protobuf_mutator::Msg_SubMsg&
Msg::_Internal::required_msg(const Msg* msg) {
  return *msg->required_msg_;
}
const ::protobuf_mutator::Msg&
Msg::_Internal::optional_msg(const Msg* msg) {
  return *msg->optional_msg_;
}
const ::protobuf_mutator::Msg&
Msg::_Internal::oneof_msg(const Msg* msg) {
  return *msg->OneOf_.oneof_msg_;
}
const ::protobuf_mutator::Msg_SubMsg&
Msg::_Internal::sub_message(const Msg* msg) {
  return *msg->sub_message_;
}
const ::protobuf_mutator::Msg_Group&
Msg::_Internal::group(const Msg* msg) {
  return *msg->group_;
}
const PROTOBUF_NAMESPACE_ID::Any&
Msg::_Internal::any(const Msg* msg) {
  return *msg->any_;
}
void Msg::set_allocated_oneof_msg(::protobuf_mutator::Msg* oneof_msg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_OneOf();
  if (oneof_msg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protobuf_mutator::Msg>::GetOwningArena(oneof_msg);
    if (message_arena != submessage_arena) {
      oneof_msg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oneof_msg, submessage_arena);
    }
    set_has_oneof_msg();
    OneOf_.oneof_msg_ = oneof_msg;
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf_mutator.Msg.oneof_msg)
}
void Msg::clear_any() {
  if (any_ != nullptr) any_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
Msg::Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  repeated_double_(arena),
  repeated_float_(arena),
  repeated_int32_(arena),
  repeated_int64_(arena),
  repeated_uint32_(arena),
  repeated_uint64_(arena),
  repeated_sint32_(arena),
  repeated_sint64_(arena),
  repeated_fixed32_(arena),
  repeated_fixed64_(arena),
  repeated_sfixed32_(arena),
  repeated_sfixed64_(arena),
  repeated_bool_(arena),
  repeated_string_(arena),
  repeated_bytes_(arena),
  repeated_enum_(arena),
  repeated_msg_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protobuf_mutator.Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      repeated_double_(from.repeated_double_),
      repeated_float_(from.repeated_float_),
      repeated_int32_(from.repeated_int32_),
      repeated_int64_(from.repeated_int64_),
      repeated_uint32_(from.repeated_uint32_),
      repeated_uint64_(from.repeated_uint64_),
      repeated_sint32_(from.repeated_sint32_),
      repeated_sint64_(from.repeated_sint64_),
      repeated_fixed32_(from.repeated_fixed32_),
      repeated_fixed64_(from.repeated_fixed64_),
      repeated_sfixed32_(from.repeated_sfixed32_),
      repeated_sfixed64_(from.repeated_sfixed64_),
      repeated_bool_(from.repeated_bool_),
      repeated_string_(from.repeated_string_),
      repeated_bytes_(from.repeated_bytes_),
      repeated_enum_(from.repeated_enum_),
      repeated_msg_(from.repeated_msg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  required_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_string()) {
    required_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_string(), 
      GetArenaForAllocation());
  }
  required_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_required_bytes()) {
    required_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_required_bytes(), 
      GetArenaForAllocation());
  }
  optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_string()) {
    optional_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_optional_string(), 
      GetArenaForAllocation());
  }
  optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_optional_bytes()) {
    optional_bytes_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_optional_bytes(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_required_msg()) {
    required_msg_ = new ::protobuf_mutator::Msg_SubMsg(*from.required_msg_);
  } else {
    required_msg_ = nullptr;
  }
  if (from._internal_has_optional_msg()) {
    optional_msg_ = new ::protobuf_mutator::Msg(*from.optional_msg_);
  } else {
    optional_msg_ = nullptr;
  }
  if (from._internal_has_sub_message()) {
    sub_message_ = new ::protobuf_mutator::Msg_SubMsg(*from.sub_message_);
  } else {
    sub_message_ = nullptr;
  }
  if (from._internal_has_group()) {
    group_ = new ::protobuf_mutator::Msg_Group(*from.group_);
  } else {
    group_ = nullptr;
  }
  if (from._internal_has_any()) {
    any_ = new PROTOBUF_NAMESPACE_ID::Any(*from.any_);
  } else {
    any_ = nullptr;
  }
  ::memcpy(&required_double_, &from.required_double_,
    static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) -
    reinterpret_cast<char*>(&required_double_)) + sizeof(optional_enum_));
  clear_has_OneOf();
  switch (from.OneOf_case()) {
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofInt32: {
      _internal_set_oneof_int32(from._internal_oneof_int32());
      break;
    }
    case kOneofInt64: {
      _internal_set_oneof_int64(from._internal_oneof_int64());
      break;
    }
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofSint32: {
      _internal_set_oneof_sint32(from._internal_oneof_sint32());
      break;
    }
    case kOneofSint64: {
      _internal_set_oneof_sint64(from._internal_oneof_sint64());
      break;
    }
    case kOneofFixed32: {
      _internal_set_oneof_fixed32(from._internal_oneof_fixed32());
      break;
    }
    case kOneofFixed64: {
      _internal_set_oneof_fixed64(from._internal_oneof_fixed64());
      break;
    }
    case kOneofSfixed32: {
      _internal_set_oneof_sfixed32(from._internal_oneof_sfixed32());
      break;
    }
    case kOneofSfixed64: {
      _internal_set_oneof_sfixed64(from._internal_oneof_sfixed64());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case kOneofMsg: {
      _internal_mutable_oneof_msg()->::protobuf_mutator::Msg::MergeFrom(from._internal_oneof_msg());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobuf_mutator.Msg)
}

inline void Msg::SharedCtor() {
required_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
required_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
optional_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
optional_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&required_msg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&optional_enum_) -
    reinterpret_cast<char*>(&required_msg_)) + sizeof(optional_enum_));
clear_has_OneOf();
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:protobuf_mutator.Msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  required_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  required_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  optional_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete required_msg_;
  if (this != internal_default_instance()) delete optional_msg_;
  if (this != internal_default_instance()) delete sub_message_;
  if (this != internal_default_instance()) delete group_;
  if (this != internal_default_instance()) delete any_;
  if (has_OneOf()) {
    clear_OneOf();
  }
}

void Msg::ArenaDtor(void* object) {
  Msg* _this = reinterpret_cast< Msg* >(object);
  (void)_this;
}
void Msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg::clear_OneOf() {
// @@protoc_insertion_point(one_of_clear_start:protobuf_mutator.Msg)
  switch (OneOf_case()) {
    case kOneofDouble: {
      // No need to clear
      break;
    }
    case kOneofFloat: {
      // No need to clear
      break;
    }
    case kOneofInt32: {
      // No need to clear
      break;
    }
    case kOneofInt64: {
      // No need to clear
      break;
    }
    case kOneofUint32: {
      // No need to clear
      break;
    }
    case kOneofUint64: {
      // No need to clear
      break;
    }
    case kOneofSint32: {
      // No need to clear
      break;
    }
    case kOneofSint64: {
      // No need to clear
      break;
    }
    case kOneofFixed32: {
      // No need to clear
      break;
    }
    case kOneofFixed64: {
      // No need to clear
      break;
    }
    case kOneofSfixed32: {
      // No need to clear
      break;
    }
    case kOneofSfixed64: {
      // No need to clear
      break;
    }
    case kOneofBool: {
      // No need to clear
      break;
    }
    case kOneofString: {
      OneOf_.oneof_string_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kOneofBytes: {
      OneOf_.oneof_bytes_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kOneofEnum: {
      // No need to clear
      break;
    }
    case kOneofMsg: {
      if (GetArenaForAllocation() == nullptr) {
        delete OneOf_.oneof_msg_;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ONEOF_NOT_SET;
}


void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf_mutator.Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  repeated_double_.Clear();
  repeated_float_.Clear();
  repeated_int32_.Clear();
  repeated_int64_.Clear();
  repeated_uint32_.Clear();
  repeated_uint64_.Clear();
  repeated_sint32_.Clear();
  repeated_sint64_.Clear();
  repeated_fixed32_.Clear();
  repeated_fixed64_.Clear();
  repeated_sfixed32_.Clear();
  repeated_sfixed64_.Clear();
  repeated_bool_.Clear();
  repeated_string_.Clear();
  repeated_bytes_.Clear();
  repeated_enum_.Clear();
  repeated_msg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      required_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      required_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      optional_string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      optional_bytes_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(required_msg_ != nullptr);
      required_msg_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(optional_msg_ != nullptr);
      optional_msg_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(sub_message_ != nullptr);
      sub_message_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(group_ != nullptr);
      group_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(any_ != nullptr);
    any_->Clear();
  }
  if (cached_has_bits & 0x0000fe00u) {
    ::memset(&required_double_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&required_sint32_) -
        reinterpret_cast<char*>(&required_double_)) + sizeof(required_sint32_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&required_sint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_double_) -
        reinterpret_cast<char*>(&required_sint64_)) + sizeof(optional_double_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&optional_int64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_sint64_) -
        reinterpret_cast<char*>(&optional_int64_)) + sizeof(optional_sint64_));
  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&optional_fixed64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optional_enum_) -
        reinterpret_cast<char*>(&optional_fixed64_)) + sizeof(optional_enum_));
  }
  clear_OneOf();
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double required_double = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_required_double(&_has_bits_);
          required_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float required_float = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_required_float(&_has_bits_);
          required_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required int32 required_int32 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_required_int32(&_has_bits_);
          required_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 required_int64 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_required_int64(&_has_bits_);
          required_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 required_uint32 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_required_uint32(&_has_bits_);
          required_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 required_uint64 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_required_uint64(&_has_bits_);
          required_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint32 required_sint32 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_required_sint32(&_has_bits_);
          required_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint64 required_sint64 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_required_sint64(&_has_bits_);
          required_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required fixed32 required_fixed32 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_required_fixed32(&_has_bits_);
          required_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // required fixed64 required_fixed64 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_required_fixed64(&_has_bits_);
          required_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // required sfixed32 required_sfixed32 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_required_sfixed32(&_has_bits_);
          required_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // required sfixed64 required_sfixed64 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_required_sfixed64(&_has_bits_);
          required_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // required bool required_bool = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_required_bool(&_has_bits_);
          required_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string required_string = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_required_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_mutator.Msg.required_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes required_bytes = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_required_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .protobuf_mutator.Msg.Enum required_enum = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_mutator::Msg_Enum_IsValid(val))) {
            _internal_set_required_enum(static_cast<::protobuf_mutator::Msg_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .protobuf_mutator.Msg.SubMsg required_msg = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_required_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double optional_double = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_optional_double(&_has_bits_);
          optional_double_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float optional_float = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_optional_float(&_has_bits_);
          optional_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 optional_int32 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_optional_int32(&_has_bits_);
          optional_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int64 optional_int64 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_optional_int64(&_has_bits_);
          optional_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 optional_uint32 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_optional_uint32(&_has_bits_);
          optional_uint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 optional_uint64 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_optional_uint64(&_has_bits_);
          optional_uint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint32 optional_sint32 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_optional_sint32(&_has_bits_);
          optional_sint32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional sint64 optional_sint64 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_optional_sint64(&_has_bits_);
          optional_sint64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional fixed32 optional_fixed32 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 213)) {
          _Internal::set_has_optional_fixed32(&_has_bits_);
          optional_fixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // optional fixed64 optional_fixed64 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          _Internal::set_has_optional_fixed64(&_has_bits_);
          optional_fixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // optional sfixed32 optional_sfixed32 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _Internal::set_has_optional_sfixed32(&_has_bits_);
          optional_sfixed32_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional sfixed64 optional_sfixed64 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _Internal::set_has_optional_sfixed64(&_has_bits_);
          optional_sfixed64_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // optional bool optional_bool = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_optional_bool(&_has_bits_);
          optional_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string optional_string = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_optional_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_mutator.Msg.optional_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes optional_bytes = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_optional_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_mutator.Msg.Enum optional_enum = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_mutator::Msg_Enum_IsValid(val))) {
            _internal_set_optional_enum(static_cast<::protobuf_mutator::Msg_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(33, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .protobuf_mutator.Msg optional_msg = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_optional_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double repeated_double = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
            ptr += sizeof(double);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<281>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_repeated_double(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float repeated_float = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<293>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_repeated_float(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 repeated_int32 = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<296>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_repeated_int32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 repeated_int64 = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<304>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_repeated_int64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 repeated_uint32 = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<312>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_repeated_uint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 repeated_uint64 = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<320>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_repeated_uint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 repeated_sint32 = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<328>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_repeated_sint32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint64 repeated_sint64 = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<336>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt64Parser(_internal_mutable_repeated_sint64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed32 repeated_fixed32 = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<349>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed32Parser(_internal_mutable_repeated_fixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated fixed64 repeated_fixed64 = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<353>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_repeated_fixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 repeated_sfixed32 = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<365>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_repeated_sfixed32(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed64 repeated_sfixed64 = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
            ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<369>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed64Parser(_internal_mutable_repeated_sfixed64(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bool repeated_bool = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_repeated_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<376>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedBoolParser(_internal_mutable_repeated_bool(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string repeated_string = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_string();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_mutator.Msg.repeated_string");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<386>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated bytes repeated_bytes = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_repeated_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<394>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_mutator.Msg.Enum repeated_enum = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::protobuf_mutator::Msg_Enum_IsValid(val))) {
              _internal_add_repeated_enum(static_cast<::protobuf_mutator::Msg_Enum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(50, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<400>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_repeated_enum(), ptr, ctx, ::protobuf_mutator::Msg_Enum_IsValid, &_internal_metadata_, 50);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .protobuf_mutator.Msg repeated_msg = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_repeated_msg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<410>(ptr));
        } else goto handle_unusual;
        continue;
      // double oneof_double = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _internal_set_oneof_double(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float oneof_float = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _internal_set_oneof_float(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 oneof_int32 = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _internal_set_oneof_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 oneof_int64 = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _internal_set_oneof_int64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 oneof_uint32 = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _internal_set_oneof_uint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 oneof_uint64 = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _internal_set_oneof_uint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 oneof_sint32 = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _internal_set_oneof_sint32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 oneof_sint64 = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _internal_set_oneof_sint64(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 oneof_fixed32 = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 229)) {
          _internal_set_oneof_fixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // fixed64 oneof_fixed64 = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          _internal_set_oneof_fixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed32 oneof_sfixed32 = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 245)) {
          _internal_set_oneof_sfixed32(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed64 oneof_sfixed64 = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 249)) {
          _internal_set_oneof_sfixed64(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // bool oneof_bool = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 0)) {
          _internal_set_oneof_bool(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string oneof_string = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_oneof_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protobuf_mutator.Msg.oneof_string");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes oneof_bytes = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_oneof_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .protobuf_mutator.Msg.Enum oneof_enum = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::protobuf_mutator::Msg_Enum_IsValid(val))) {
            _internal_set_oneof_enum(static_cast<::protobuf_mutator::Msg_Enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(67, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // .protobuf_mutator.Msg oneof_msg = 68;
      case 68:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_oneof_msg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .protobuf_mutator.Msg.SubMsg sub_message = 69;
      case 69:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required group Group = 70 { ... };
      case 70:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 51)) {
          ptr = ctx->ParseGroup(_internal_mutable_group(), ptr, 563);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .google.protobuf.Any any = 90;
      case 90:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_any(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf_mutator.Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double required_double = 1;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_required_double(), target);
  }

  // required float required_float = 2;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_required_float(), target);
  }

  // required int32 required_int32 = 3;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_required_int32(), target);
  }

  // required int64 required_int64 = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_required_int64(), target);
  }

  // required uint32 required_uint32 = 5;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_required_uint32(), target);
  }

  // required uint64 required_uint64 = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_required_uint64(), target);
  }

  // required sint32 required_sint32 = 7;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(7, this->_internal_required_sint32(), target);
  }

  // required sint64 required_sint64 = 8;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(8, this->_internal_required_sint64(), target);
  }

  // required fixed32 required_fixed32 = 9;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(9, this->_internal_required_fixed32(), target);
  }

  // required fixed64 required_fixed64 = 10;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(10, this->_internal_required_fixed64(), target);
  }

  // required sfixed32 required_sfixed32 = 11;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(11, this->_internal_required_sfixed32(), target);
  }

  // required sfixed64 required_sfixed64 = 12;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(12, this->_internal_required_sfixed64(), target);
  }

  // required bool required_bool = 13;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_required_bool(), target);
  }

  // required string required_string = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_required_string().data(), static_cast<int>(this->_internal_required_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_mutator.Msg.required_string");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_required_string(), target);
  }

  // required bytes required_bytes = 15;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        15, this->_internal_required_bytes(), target);
  }

  // required .protobuf_mutator.Msg.Enum required_enum = 16;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_required_enum(), target);
  }

  // required .protobuf_mutator.Msg.SubMsg required_msg = 17;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::required_msg(this), target, stream);
  }

  // optional double optional_double = 18;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_optional_double(), target);
  }

  // optional float optional_float = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_optional_float(), target);
  }

  // optional int32 optional_int32 = 20;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(20, this->_internal_optional_int32(), target);
  }

  // optional int64 optional_int64 = 21;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(21, this->_internal_optional_int64(), target);
  }

  // optional uint32 optional_uint32 = 22;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_optional_uint32(), target);
  }

  // optional uint64 optional_uint64 = 23;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(23, this->_internal_optional_uint64(), target);
  }

  // optional sint32 optional_sint32 = 24;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(24, this->_internal_optional_sint32(), target);
  }

  // optional sint64 optional_sint64 = 25;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(25, this->_internal_optional_sint64(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional fixed32 optional_fixed32 = 26;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(26, this->_internal_optional_fixed32(), target);
  }

  // optional fixed64 optional_fixed64 = 27;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(27, this->_internal_optional_fixed64(), target);
  }

  // optional sfixed32 optional_sfixed32 = 28;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(28, this->_internal_optional_sfixed32(), target);
  }

  // optional sfixed64 optional_sfixed64 = 29;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(29, this->_internal_optional_sfixed64(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool optional_bool = 30;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_optional_bool(), target);
  }

  // optional string optional_string = 31;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_optional_string().data(), static_cast<int>(this->_internal_optional_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_mutator.Msg.optional_string");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_optional_string(), target);
  }

  // optional bytes optional_bytes = 32;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        32, this->_internal_optional_bytes(), target);
  }

  cached_has_bits = _has_bits_[1];
  // optional .protobuf_mutator.Msg.Enum optional_enum = 33;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      33, this->_internal_optional_enum(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .protobuf_mutator.Msg optional_msg = 34;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        34, _Internal::optional_msg(this), target, stream);
  }

  // repeated double repeated_double = 35;
  for (int i = 0, n = this->_internal_repeated_double_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(35, this->_internal_repeated_double(i), target);
  }

  // repeated float repeated_float = 36;
  for (int i = 0, n = this->_internal_repeated_float_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(36, this->_internal_repeated_float(i), target);
  }

  // repeated int32 repeated_int32 = 37;
  for (int i = 0, n = this->_internal_repeated_int32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(37, this->_internal_repeated_int32(i), target);
  }

  // repeated int64 repeated_int64 = 38;
  for (int i = 0, n = this->_internal_repeated_int64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(38, this->_internal_repeated_int64(i), target);
  }

  // repeated uint32 repeated_uint32 = 39;
  for (int i = 0, n = this->_internal_repeated_uint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(39, this->_internal_repeated_uint32(i), target);
  }

  // repeated uint64 repeated_uint64 = 40;
  for (int i = 0, n = this->_internal_repeated_uint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(40, this->_internal_repeated_uint64(i), target);
  }

  // repeated sint32 repeated_sint32 = 41;
  for (int i = 0, n = this->_internal_repeated_sint32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(41, this->_internal_repeated_sint32(i), target);
  }

  // repeated sint64 repeated_sint64 = 42;
  for (int i = 0, n = this->_internal_repeated_sint64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(42, this->_internal_repeated_sint64(i), target);
  }

  // repeated fixed32 repeated_fixed32 = 43;
  for (int i = 0, n = this->_internal_repeated_fixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(43, this->_internal_repeated_fixed32(i), target);
  }

  // repeated fixed64 repeated_fixed64 = 44;
  for (int i = 0, n = this->_internal_repeated_fixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(44, this->_internal_repeated_fixed64(i), target);
  }

  // repeated sfixed32 repeated_sfixed32 = 45;
  for (int i = 0, n = this->_internal_repeated_sfixed32_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(45, this->_internal_repeated_sfixed32(i), target);
  }

  // repeated sfixed64 repeated_sfixed64 = 46;
  for (int i = 0, n = this->_internal_repeated_sfixed64_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(46, this->_internal_repeated_sfixed64(i), target);
  }

  // repeated bool repeated_bool = 47;
  for (int i = 0, n = this->_internal_repeated_bool_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(47, this->_internal_repeated_bool(i), target);
  }

  // repeated string repeated_string = 48;
  for (int i = 0, n = this->_internal_repeated_string_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_string(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "protobuf_mutator.Msg.repeated_string");
    target = stream->WriteString(48, s, target);
  }

  // repeated bytes repeated_bytes = 49;
  for (int i = 0, n = this->_internal_repeated_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_repeated_bytes(i);
    target = stream->WriteBytes(49, s, target);
  }

  // repeated .protobuf_mutator.Msg.Enum repeated_enum = 50;
  for (int i = 0, n = this->_internal_repeated_enum_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        50, this->_internal_repeated_enum(i), target);
  }

  // repeated .protobuf_mutator.Msg repeated_msg = 51;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_repeated_msg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, this->_internal_repeated_msg(i), target, stream);
  }

  switch (OneOf_case()) {
    case kOneofDouble: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(52, this->_internal_oneof_double(), target);
      break;
    }
    case kOneofFloat: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(53, this->_internal_oneof_float(), target);
      break;
    }
    case kOneofInt32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(54, this->_internal_oneof_int32(), target);
      break;
    }
    case kOneofInt64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(55, this->_internal_oneof_int64(), target);
      break;
    }
    case kOneofUint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(56, this->_internal_oneof_uint32(), target);
      break;
    }
    case kOneofUint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(57, this->_internal_oneof_uint64(), target);
      break;
    }
    case kOneofSint32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(58, this->_internal_oneof_sint32(), target);
      break;
    }
    case kOneofSint64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(59, this->_internal_oneof_sint64(), target);
      break;
    }
    case kOneofFixed32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(60, this->_internal_oneof_fixed32(), target);
      break;
    }
    case kOneofFixed64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(61, this->_internal_oneof_fixed64(), target);
      break;
    }
    case kOneofSfixed32: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(62, this->_internal_oneof_sfixed32(), target);
      break;
    }
    case kOneofSfixed64: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(63, this->_internal_oneof_sfixed64(), target);
      break;
    }
    case kOneofBool: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(64, this->_internal_oneof_bool(), target);
      break;
    }
    case kOneofString: {
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->_internal_oneof_string().data(), static_cast<int>(this->_internal_oneof_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "protobuf_mutator.Msg.oneof_string");
      target = stream->WriteStringMaybeAliased(
          65, this->_internal_oneof_string(), target);
      break;
    }
    case kOneofBytes: {
      target = stream->WriteBytesMaybeAliased(
          66, this->_internal_oneof_bytes(), target);
      break;
    }
    case kOneofEnum: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        67, this->_internal_oneof_enum(), target);
      break;
    }
    case kOneofMsg: {
      target = stream->EnsureSpace(target);
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(
          68, _Internal::oneof_msg(this), target, stream);
      break;
    }
    default: ;
  }
  // optional .protobuf_mutator.Msg.SubMsg sub_message = 69;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        69, _Internal::sub_message(this), target, stream);
  }

  // required group Group = 70 { ... };
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteGroup(
        70, _Internal::group(this), target, stream);
  }

  // optional .google.protobuf.Any any = 90;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        90, _Internal::any(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf_mutator.Msg)
  return target;
}

size_t Msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:protobuf_mutator.Msg)
  size_t total_size = 0;

  if (_internal_has_required_string()) {
    // required string required_string = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_string());
  }

  if (_internal_has_required_bytes()) {
    // required bytes required_bytes = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_required_bytes());
  }

  if (_internal_has_required_msg()) {
    // required .protobuf_mutator.Msg.SubMsg required_msg = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_msg_);
  }

  if (_internal_has_group()) {
    // required group Group = 70 { ... };
    total_size += 4 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
        *group_);
  }

  if (_internal_has_required_double()) {
    // required double required_double = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_required_float()) {
    // required float required_float = 2;
    total_size += 1 + 4;
  }

  if (_internal_has_required_int32()) {
    // required int32 required_int32 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_required_int32());
  }

  if (_internal_has_required_int64()) {
    // required int64 required_int64 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_required_int64());
  }

  if (_internal_has_required_uint64()) {
    // required uint64 required_uint64 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_required_uint64());
  }

  if (_internal_has_required_uint32()) {
    // required uint32 required_uint32 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_required_uint32());
  }

  if (_internal_has_required_sint32()) {
    // required sint32 required_sint32 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_required_sint32());
  }

  if (_internal_has_required_sint64()) {
    // required sint64 required_sint64 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_required_sint64());
  }

  if (_internal_has_required_fixed64()) {
    // required fixed64 required_fixed64 = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_required_fixed32()) {
    // required fixed32 required_fixed32 = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_required_sfixed32()) {
    // required sfixed32 required_sfixed32 = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_required_sfixed64()) {
    // required sfixed64 required_sfixed64 = 12;
    total_size += 1 + 8;
  }

  if (_internal_has_required_enum()) {
    // required .protobuf_mutator.Msg.Enum required_enum = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_required_enum());
  }

  if (_internal_has_required_bool()) {
    // required bool required_bool = 13;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf_mutator.Msg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x043ffe93) ^ 0x043ffe93) == 0) {  // All required fields are present.
    // required string required_string = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_required_string());

    // required bytes required_bytes = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_required_bytes());

    // required .protobuf_mutator.Msg.SubMsg required_msg = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *required_msg_);

    // required group Group = 70 { ... };
    total_size += 4 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GroupSize(
        *group_);

    // required double required_double = 1;
    total_size += 1 + 8;

    // required float required_float = 2;
    total_size += 1 + 4;

    // required int32 required_int32 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_required_int32());

    // required int64 required_int64 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_required_int64());

    // required uint64 required_uint64 = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_required_uint64());

    // required uint32 required_uint32 = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_required_uint32());

    // required sint32 required_sint32 = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_required_sint32());

    // required sint64 required_sint64 = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
        this->_internal_required_sint64());

    // required fixed64 required_fixed64 = 10;
    total_size += 1 + 8;

    // required fixed32 required_fixed32 = 9;
    total_size += 1 + 4;

    // required sfixed32 required_sfixed32 = 11;
    total_size += 1 + 4;

    // required sfixed64 required_sfixed64 = 12;
    total_size += 1 + 8;

    // required .protobuf_mutator.Msg.Enum required_enum = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_required_enum());

    // required bool required_bool = 13;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double repeated_double = 35;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_double_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_double_size());
    total_size += data_size;
  }

  // repeated float repeated_float = 36;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_float_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_float_size());
    total_size += data_size;
  }

  // repeated int32 repeated_int32 = 37;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->repeated_int32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int32_size());
    total_size += data_size;
  }

  // repeated int64 repeated_int64 = 38;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->repeated_int64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_int64_size());
    total_size += data_size;
  }

  // repeated uint32 repeated_uint32 = 39;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->repeated_uint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint32_size());
    total_size += data_size;
  }

  // repeated uint64 repeated_uint64 = 40;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->repeated_uint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_uint64_size());
    total_size += data_size;
  }

  // repeated sint32 repeated_sint32 = 41;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->repeated_sint32_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sint32_size());
    total_size += data_size;
  }

  // repeated sint64 repeated_sint64 = 42;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt64Size(this->repeated_sint64_);
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sint64_size());
    total_size += data_size;
  }

  // repeated fixed32 repeated_fixed32 = 43;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed32_size());
    total_size += data_size;
  }

  // repeated fixed64 repeated_fixed64 = 44;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_fixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_fixed64_size());
    total_size += data_size;
  }

  // repeated sfixed32 repeated_sfixed32 = 45;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed32_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sfixed32_size());
    total_size += data_size;
  }

  // repeated sfixed64 repeated_sfixed64 = 46;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_sfixed64_size());
    size_t data_size = 8UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_sfixed64_size());
    total_size += data_size;
  }

  // repeated bool repeated_bool = 47;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_bool_size());
    size_t data_size = 1UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_repeated_bool_size());
    total_size += data_size;
  }

  // repeated string repeated_string = 48;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_string_.size());
  for (int i = 0, n = repeated_string_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      repeated_string_.Get(i));
  }

  // repeated bytes repeated_bytes = 49;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(repeated_bytes_.size());
  for (int i = 0, n = repeated_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      repeated_bytes_.Get(i));
  }

  // repeated .protobuf_mutator.Msg.Enum repeated_enum = 50;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_repeated_enum_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_repeated_enum(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .protobuf_mutator.Msg repeated_msg = 51;
  total_size += 2UL * this->_internal_repeated_msg_size();
  for (const auto& msg : this->repeated_msg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional string optional_string = 31;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_optional_string());
    }

    // optional bytes optional_bytes = 32;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_optional_bytes());
    }

  }
  if (cached_has_bits & 0x00000060u) {
    // optional .protobuf_mutator.Msg optional_msg = 34;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *optional_msg_);
    }

    // optional .protobuf_mutator.Msg.SubMsg sub_message = 69;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *sub_message_);
    }

  }
  // optional .google.protobuf.Any any = 90;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *any_);
  }

  if (cached_has_bits & 0x00c00000u) {
    // optional float optional_float = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional double optional_double = 18;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional int64 optional_int64 = 21;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_optional_int64());
    }

    // optional int32 optional_int32 = 20;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_optional_int32());
    }

  }
  if (cached_has_bits & 0xf8000000u) {
    // optional bool optional_bool = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 + 1;
    }

    // optional uint64 optional_uint64 = 23;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_optional_uint64());
    }

    // optional uint32 optional_uint32 = 22;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_optional_uint32());
    }

    // optional sint32 optional_sint32 = 24;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_optional_sint32());
    }

    // optional sint64 optional_sint64 = 25;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_optional_sint64());
    }

  }
  cached_has_bits = _has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 optional_fixed64 = 27;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 + 8;
    }

    // optional fixed32 optional_fixed32 = 26;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 + 4;
    }

    // optional sfixed32 optional_sfixed32 = 28;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + 4;
    }

    // optional sfixed64 optional_sfixed64 = 29;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + 8;
    }

    // optional .protobuf_mutator.Msg.Enum optional_enum = 33;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_optional_enum());
    }

  }
  switch (OneOf_case()) {
    // double oneof_double = 52;
    case kOneofDouble: {
      total_size += 2 + 8;
      break;
    }
    // float oneof_float = 53;
    case kOneofFloat: {
      total_size += 2 + 4;
      break;
    }
    // int32 oneof_int32 = 54;
    case kOneofInt32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_oneof_int32());
      break;
    }
    // int64 oneof_int64 = 55;
    case kOneofInt64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_oneof_int64());
      break;
    }
    // uint32 oneof_uint32 = 56;
    case kOneofUint32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_oneof_uint32());
      break;
    }
    // uint64 oneof_uint64 = 57;
    case kOneofUint64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_oneof_uint64());
      break;
    }
    // sint32 oneof_sint32 = 58;
    case kOneofSint32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_oneof_sint32());
      break;
    }
    // sint64 oneof_sint64 = 59;
    case kOneofSint64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_oneof_sint64());
      break;
    }
    // fixed32 oneof_fixed32 = 60;
    case kOneofFixed32: {
      total_size += 2 + 4;
      break;
    }
    // fixed64 oneof_fixed64 = 61;
    case kOneofFixed64: {
      total_size += 2 + 8;
      break;
    }
    // sfixed32 oneof_sfixed32 = 62;
    case kOneofSfixed32: {
      total_size += 2 + 4;
      break;
    }
    // sfixed64 oneof_sfixed64 = 63;
    case kOneofSfixed64: {
      total_size += 2 + 8;
      break;
    }
    // bool oneof_bool = 64;
    case kOneofBool: {
      total_size += 2 + 1;
      break;
    }
    // string oneof_string = 65;
    case kOneofString: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_oneof_string());
      break;
    }
    // bytes oneof_bytes = 66;
    case kOneofBytes: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_oneof_bytes());
      break;
    }
    // .protobuf_mutator.Msg.Enum oneof_enum = 67;
    case kOneofEnum: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_oneof_enum());
      break;
    }
    // .protobuf_mutator.Msg oneof_msg = 68;
    case kOneofMsg: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *OneOf_.oneof_msg_);
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg::GetClassData() const { return &_class_data_; }

void Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg *>(to)->MergeFrom(
      static_cast<const Msg &>(from));
}


void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf_mutator.Msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  repeated_double_.MergeFrom(from.repeated_double_);
  repeated_float_.MergeFrom(from.repeated_float_);
  repeated_int32_.MergeFrom(from.repeated_int32_);
  repeated_int64_.MergeFrom(from.repeated_int64_);
  repeated_uint32_.MergeFrom(from.repeated_uint32_);
  repeated_uint64_.MergeFrom(from.repeated_uint64_);
  repeated_sint32_.MergeFrom(from.repeated_sint32_);
  repeated_sint64_.MergeFrom(from.repeated_sint64_);
  repeated_fixed32_.MergeFrom(from.repeated_fixed32_);
  repeated_fixed64_.MergeFrom(from.repeated_fixed64_);
  repeated_sfixed32_.MergeFrom(from.repeated_sfixed32_);
  repeated_sfixed64_.MergeFrom(from.repeated_sfixed64_);
  repeated_bool_.MergeFrom(from.repeated_bool_);
  repeated_string_.MergeFrom(from.repeated_string_);
  repeated_bytes_.MergeFrom(from.repeated_bytes_);
  repeated_enum_.MergeFrom(from.repeated_enum_);
  repeated_msg_.MergeFrom(from.repeated_msg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_required_string(from._internal_required_string());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_required_bytes(from._internal_required_bytes());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_optional_string(from._internal_optional_string());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_optional_bytes(from._internal_optional_bytes());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_required_msg()->::protobuf_mutator::Msg_SubMsg::MergeFrom(from._internal_required_msg());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_optional_msg()->::protobuf_mutator::Msg::MergeFrom(from._internal_optional_msg());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_sub_message()->::protobuf_mutator::Msg_SubMsg::MergeFrom(from._internal_sub_message());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_group()->::protobuf_mutator::Msg_Group::MergeFrom(from._internal_group());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_mutable_any()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_any());
    }
    if (cached_has_bits & 0x00000200u) {
      required_double_ = from.required_double_;
    }
    if (cached_has_bits & 0x00000400u) {
      required_float_ = from.required_float_;
    }
    if (cached_has_bits & 0x00000800u) {
      required_int32_ = from.required_int32_;
    }
    if (cached_has_bits & 0x00001000u) {
      required_int64_ = from.required_int64_;
    }
    if (cached_has_bits & 0x00002000u) {
      required_uint64_ = from.required_uint64_;
    }
    if (cached_has_bits & 0x00004000u) {
      required_uint32_ = from.required_uint32_;
    }
    if (cached_has_bits & 0x00008000u) {
      required_sint32_ = from.required_sint32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      required_sint64_ = from.required_sint64_;
    }
    if (cached_has_bits & 0x00020000u) {
      required_fixed64_ = from.required_fixed64_;
    }
    if (cached_has_bits & 0x00040000u) {
      required_fixed32_ = from.required_fixed32_;
    }
    if (cached_has_bits & 0x00080000u) {
      required_sfixed32_ = from.required_sfixed32_;
    }
    if (cached_has_bits & 0x00100000u) {
      required_sfixed64_ = from.required_sfixed64_;
    }
    if (cached_has_bits & 0x00200000u) {
      required_enum_ = from.required_enum_;
    }
    if (cached_has_bits & 0x00400000u) {
      optional_float_ = from.optional_float_;
    }
    if (cached_has_bits & 0x00800000u) {
      optional_double_ = from.optional_double_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      optional_int64_ = from.optional_int64_;
    }
    if (cached_has_bits & 0x02000000u) {
      optional_int32_ = from.optional_int32_;
    }
    if (cached_has_bits & 0x04000000u) {
      required_bool_ = from.required_bool_;
    }
    if (cached_has_bits & 0x08000000u) {
      optional_bool_ = from.optional_bool_;
    }
    if (cached_has_bits & 0x10000000u) {
      optional_uint64_ = from.optional_uint64_;
    }
    if (cached_has_bits & 0x20000000u) {
      optional_uint32_ = from.optional_uint32_;
    }
    if (cached_has_bits & 0x40000000u) {
      optional_sint32_ = from.optional_sint32_;
    }
    if (cached_has_bits & 0x80000000u) {
      optional_sint64_ = from.optional_sint64_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      optional_fixed64_ = from.optional_fixed64_;
    }
    if (cached_has_bits & 0x00000002u) {
      optional_fixed32_ = from.optional_fixed32_;
    }
    if (cached_has_bits & 0x00000004u) {
      optional_sfixed32_ = from.optional_sfixed32_;
    }
    if (cached_has_bits & 0x00000008u) {
      optional_sfixed64_ = from.optional_sfixed64_;
    }
    if (cached_has_bits & 0x00000010u) {
      optional_enum_ = from.optional_enum_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  switch (from.OneOf_case()) {
    case kOneofDouble: {
      _internal_set_oneof_double(from._internal_oneof_double());
      break;
    }
    case kOneofFloat: {
      _internal_set_oneof_float(from._internal_oneof_float());
      break;
    }
    case kOneofInt32: {
      _internal_set_oneof_int32(from._internal_oneof_int32());
      break;
    }
    case kOneofInt64: {
      _internal_set_oneof_int64(from._internal_oneof_int64());
      break;
    }
    case kOneofUint32: {
      _internal_set_oneof_uint32(from._internal_oneof_uint32());
      break;
    }
    case kOneofUint64: {
      _internal_set_oneof_uint64(from._internal_oneof_uint64());
      break;
    }
    case kOneofSint32: {
      _internal_set_oneof_sint32(from._internal_oneof_sint32());
      break;
    }
    case kOneofSint64: {
      _internal_set_oneof_sint64(from._internal_oneof_sint64());
      break;
    }
    case kOneofFixed32: {
      _internal_set_oneof_fixed32(from._internal_oneof_fixed32());
      break;
    }
    case kOneofFixed64: {
      _internal_set_oneof_fixed64(from._internal_oneof_fixed64());
      break;
    }
    case kOneofSfixed32: {
      _internal_set_oneof_sfixed32(from._internal_oneof_sfixed32());
      break;
    }
    case kOneofSfixed64: {
      _internal_set_oneof_sfixed64(from._internal_oneof_sfixed64());
      break;
    }
    case kOneofBool: {
      _internal_set_oneof_bool(from._internal_oneof_bool());
      break;
    }
    case kOneofString: {
      _internal_set_oneof_string(from._internal_oneof_string());
      break;
    }
    case kOneofBytes: {
      _internal_set_oneof_bytes(from._internal_oneof_bytes());
      break;
    }
    case kOneofEnum: {
      _internal_set_oneof_enum(from._internal_oneof_enum());
      break;
    }
    case kOneofMsg: {
      _internal_mutable_oneof_msg()->::protobuf_mutator::Msg::MergeFrom(from._internal_oneof_msg());
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf_mutator.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(repeated_msg_)) return false;
  if (_internal_has_optional_msg()) {
    if (!optional_msg_->IsInitialized()) return false;
  }
  if (_internal_has_group()) {
    if (!group_->IsInitialized()) return false;
  }
  switch (OneOf_case()) {
    case kOneofDouble: {
      break;
    }
    case kOneofFloat: {
      break;
    }
    case kOneofInt32: {
      break;
    }
    case kOneofInt64: {
      break;
    }
    case kOneofUint32: {
      break;
    }
    case kOneofUint64: {
      break;
    }
    case kOneofSint32: {
      break;
    }
    case kOneofSint64: {
      break;
    }
    case kOneofFixed32: {
      break;
    }
    case kOneofFixed64: {
      break;
    }
    case kOneofSfixed32: {
      break;
    }
    case kOneofSfixed64: {
      break;
    }
    case kOneofBool: {
      break;
    }
    case kOneofString: {
      break;
    }
    case kOneofBytes: {
      break;
    }
    case kOneofEnum: {
      break;
    }
    case kOneofMsg: {
      if (has_oneof_msg()) {
        if (!this->oneof_msg().IsInitialized()) return false;
      }
      break;
    }
    case ONEOF_NOT_SET: {
      break;
    }
  }
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(_has_bits_[1], other->_has_bits_[1]);
  repeated_double_.InternalSwap(&other->repeated_double_);
  repeated_float_.InternalSwap(&other->repeated_float_);
  repeated_int32_.InternalSwap(&other->repeated_int32_);
  repeated_int64_.InternalSwap(&other->repeated_int64_);
  repeated_uint32_.InternalSwap(&other->repeated_uint32_);
  repeated_uint64_.InternalSwap(&other->repeated_uint64_);
  repeated_sint32_.InternalSwap(&other->repeated_sint32_);
  repeated_sint64_.InternalSwap(&other->repeated_sint64_);
  repeated_fixed32_.InternalSwap(&other->repeated_fixed32_);
  repeated_fixed64_.InternalSwap(&other->repeated_fixed64_);
  repeated_sfixed32_.InternalSwap(&other->repeated_sfixed32_);
  repeated_sfixed64_.InternalSwap(&other->repeated_sfixed64_);
  repeated_bool_.InternalSwap(&other->repeated_bool_);
  repeated_string_.InternalSwap(&other->repeated_string_);
  repeated_bytes_.InternalSwap(&other->repeated_bytes_);
  repeated_enum_.InternalSwap(&other->repeated_enum_);
  repeated_msg_.InternalSwap(&other->repeated_msg_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &required_string_, GetArenaForAllocation(),
      &other->required_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &required_bytes_, GetArenaForAllocation(),
      &other->required_bytes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &optional_string_, GetArenaForAllocation(),
      &other->optional_string_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &optional_bytes_, GetArenaForAllocation(),
      &other->optional_bytes_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg, optional_enum_)
      + sizeof(Msg::optional_enum_)
      - PROTOBUF_FIELD_OFFSET(Msg, required_msg_)>(
          reinterpret_cast<char*>(&required_msg_),
          reinterpret_cast<char*>(&other->required_msg_));
  swap(OneOf_, other->OneOf_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_mutator_5ftest_5fproto2_2eproto_getter, &descriptor_table_mutator_5ftest_5fproto2_2eproto_once,
      file_level_metadata_mutator_5ftest_5fproto2_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf_mutator
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg_SubMsg* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg_SubMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg_SubMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg_Group* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg_Group >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg_Group >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg_EmptyMessage* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg_EmptyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg_EmptyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg_RegressionMessage* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg_RegressionMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg_RegressionMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg_SmallMessage* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg_SmallMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg_SmallMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg_MapMessage_Map1Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg_MapMessage_Map1Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg_MapMessage_Map1Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg_MapMessage_Map2Entry_DoNotUse* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg_MapMessage_Map2Entry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg_MapMessage_Map2Entry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg_MapMessage* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg_MapMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg_MapMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protobuf_mutator::Msg* Arena::CreateMaybeMessage< ::protobuf_mutator::Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protobuf_mutator::Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
